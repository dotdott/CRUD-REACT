{"version":3,"sources":["components/EditForm.js","components/DataForm.js","components/SearchData.js","components/Form.js","App.js","index.js"],"names":["EditForm","overlay","setOverlay","updateData","useState","newName","setNewName","newPhone","setNewPhone","className","type","name","placeholder","onChange","e","target","value","id","onClick","DataForm","phone","db","isUpdated","setIsUpdated","Axios","delete","removeData","put","note","SearchData","dataList","typedSearch","setTypedSearch","filteredData","filter","data","props","toUpperCase","includes","Form","setName","setPhone","Datas","setDatas","error","setError","addData","post","document","getElementById","reset","useEffect","get","then","response","map","Data","onSubmit","htmlFor","pattern","App","preventDefault","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.eb25d580.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport DataForm from './DataForm';\r\n\r\nconst EditForm = ({overlay, setOverlay, updateData}) => {\r\n    const [newName, setNewName] = useState('');\r\n\r\n    const [newPhone, setNewPhone] = useState('');    \r\n\r\n    const handleNewName = e => {\r\n        setNewName(e.target.value)\r\n    }\r\n\r\n    const handleNewPhone = e => {\r\n        setNewPhone(e.target.value)\r\n    }\r\n\r\n    const updateChanges = () => {\r\n        updateData(newName, newPhone)\r\n        setOverlay(false)\r\n    }\r\n\r\n    const cancelChanges = () => {\r\n        setOverlay(false)\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <div className={overlay ? 'overlay active' : 'overlay'}>\r\n            <div className=\"edit-overlay\">\r\n                <input \r\n                    type=\"text\"\r\n                    name=\"new-name\" \r\n                    placeholder=\"Enter the new name\"    \r\n                    onChange={handleNewName}\r\n                    />\r\n                \r\n                <input \r\n                    type=\"tel\" \r\n                    name=\"new-phone\" \r\n                    placeholder=\"Enter the new number\"  \r\n                    onChange={handleNewPhone}                      \r\n                />\r\n\r\n                    <div className=\"overlay-buttons\">\r\n                        <button \r\n                            type=\"submit\" \r\n                            id=\"save-edit\"\r\n                            onClick={updateChanges}>\r\n                            Save\r\n                        </button>\r\n                        <button \r\n                            type=\"submit\" \r\n                            id=\"cancel-edit\"\r\n                            onClick={cancelChanges}>\r\n                            Cancel\r\n                        </button>\r\n                    </div>\r\n            </div>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default EditForm;","import Axios from 'axios';\r\nimport React, { useState } from 'react';\r\nimport EditForm from './EditForm';\r\n\r\nconst DataForm = ({ \r\n        name, \r\n        phone, \r\n        id, \r\n    }) => {\r\n    const db = 'https://crud-mysql-heroku.herokuapp.com';\r\n\r\n    const [overlay, setOverlay] = useState(false);\r\n\r\n    const [isUpdated, setIsUpdated] = useState(false);\r\n\r\n    function removeData(id) {\r\n        Axios.delete(db + `/crud/delete/${id}`)\r\n    } \r\n\r\n    function updateData(newName, newPhone){   \r\n        Axios.put(db + '/crud/update', {\r\n            name: newName,\r\n            note: newPhone,\r\n            id: id\r\n        })\r\n    }\r\n\r\nreturn (\r\n    <>\r\n        <li>\r\n            <p>{name}</p>\r\n            <small>{phone}</small>\r\n            <a>\r\n            <i className=\"fas fa-edit\" onClick={() => setOverlay(true)}></i>\r\n            </a>\r\n\r\n            <a>\r\n            <i className=\"fas fa-trash-alt\" onClick={() => removeData(id)}></i>\r\n            </a>\r\n        </li>\r\n        <EditForm \r\n            setOverlay={setOverlay}\r\n            overlay={overlay}\r\n            updateData={updateData}\r\n            isUpdated={isUpdated}\r\n            setIsUpdated={setIsUpdated}\r\n        />\r\n    </>\r\n    )\r\n}\r\n\r\nexport default DataForm;","import React, { useState } from 'react';\r\n\r\nconst SearchData = ({ dataList }) => {\r\n    const [typedSearch, setTypedSearch] = useState('');\r\n\r\n    const typedFilter = e => {\r\n        setTypedSearch(e.target.value.toUpperCase())        \r\n    }\r\n    \r\n    const filteredData = dataList.filter(data => {\r\n        const values = data.props.name.toUpperCase() || data.props.phone.toUpperCase();\r\n        if(values.includes(typedSearch)){\r\n            return data\r\n        } \r\n    })\r\n\r\n    return (\r\n        <div className=\"users-datas\">\r\n        <input \r\n            type=\"text\" \r\n            id=\"search-name\" \r\n            name=\"search-name\" \r\n            placeholder=\"Buscar\" \r\n            onChange={typedFilter} \r\n        />\r\n            {filteredData ? (filteredData) : (dataList)}\r\n        </div>                    \r\n    )\r\n}\r\n\r\nexport default SearchData;","import React, { useEffect, useState } from 'react';\r\nimport DataForm from './DataForm';\r\nimport SearchData from './SearchData';\r\nimport Axios from 'axios';\r\n\r\nconst Form = ({newName}) => {\r\n    const db = 'https://crud-mysql-heroku.herokuapp.com';\r\n\r\n    const [name, setName] = useState('');\r\n\r\n    const [phone, setPhone] = useState('');\r\n\r\n    const [Datas, setDatas] = useState([]);\r\n\r\n    const [error, setError] = useState(false);\r\n\r\n\r\n    function handleName(e) {\r\n        setName(e.target.value);\r\n    };\r\n\r\n    function handlePhone(e) {\r\n        setPhone(e.target.value);\r\n    };\r\n\r\n    function addData(name, phone, e) {\r\n        if( name !== ''  && phone !== ''){\r\n            Axios.post(db + '/crud/post', {\r\n                name: name,\r\n                note: phone\r\n            })\r\n\r\n            document.getElementById('form').reset()\r\n            resetValues();\r\n            setError(false)\r\n        } else{\r\n            setError(true)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        Axios.get(db + '/crud/get')\r\n        .then(response => {\r\n            setDatas(response.data);\r\n        })\r\n    },[addData])\r\n\r\n    function resetValues(){\r\n        setPhone('');\r\n        setName('');\r\n    }\r\n\r\n    const dataList = Datas.map(Data => (\r\n        <DataForm \r\n            id={Data.id}\r\n            key={Data.id}\r\n            name={Data.name}\r\n            phone={Data.note}\r\n            setDatas={setDatas}\r\n            Datas={Datas}\r\n        />\r\n    ))\r\n\r\n\r\n    return (\r\n        <div className=\"form\">\r\n            <form onSubmit={newName} id=\"form\">\r\n            <h1>CRUD</h1>\r\n                <label htmlFor=\"username\">\r\n                    Name\r\n                    <input \r\n                        type=\"text\"\r\n                        name=\"name\"\r\n                        id=\"username\"\r\n                        placeholder=\"Ex: Gabriel Jodas\"\r\n                        onChange={handleName}\r\n                    />\r\n                </label>\r\n\r\n                <input \r\n                    type=\"tel\"\r\n                    name=\"cellphone\"  \r\n                    id=\"userphone\" \r\n                    placeholder=\"Note\"\r\n                    pattern=\"[0-9]*$\" \r\n                    onChange={handlePhone}\r\n                    />\r\n                    {error && \r\n                <span className=\"error\">You need to fill both fields!</span>\r\n                    }\r\n                <button \r\n                    id=\"submitBtn\" \r\n                    type=\"submit\"\r\n                    onClick={() => addData(name,phone)}>\r\n                    Confirm\r\n                </button>\r\n            </form>           \r\n            \r\n                <SearchData \r\n                    Datas={Datas}\r\n                    dataList={dataList}\r\n                />            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Form;","import React, { useState } from 'react';\r\nimport Form from './components/Form';\r\nimport EditForm from './components/EditForm';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const newName = e => {\r\n    e.preventDefault()\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n    \r\n      <Form \r\n        newName={newName}\r\n      />\r\n\r\n      <EditForm />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}